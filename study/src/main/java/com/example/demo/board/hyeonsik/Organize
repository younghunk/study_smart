Spring Security,    JWT를 사용하기전 JWT 구조 정리!!

Spring Security 
1. 먼저 http 요청이 서버로 전송되어야함
2.  AuthenticationFilter를 사용/ 즉 요청을 가로채고, 사용자가 인증되었는지 확인하는 데 사용함 => 인증 토큰 생성
3.   인증 토큰을 AuthenicationManger가 받음(id와 pw를)
4.    데이터베이스에 담긴 인증정보와 비교하기 위해 userDetailService에 정보를넘겨줌
5.     데이터베이스에서 찾은 객체를 만듬

6. AuthenticationProvider는 UserDetails를 넘겨받고 비교한다.
7. 인증이 완료되면 권한과 사용자 정보를 담은 정보를 전달.
8. AuthenticationFilter까지 Authentication 객체가 반환된다.
9. Authentication을 SecurityContext에 저장한다.
--------------------------------------------------------------------------------------------------------------

JWT는 header , payload, signature로 구성되어 있다?
Header : Signature를 해싱하기 위한 알고리즘 정보
Payload : 서버와 클라이언트가 주고받을 시스템에서 실제 사용될 정보:
클레임(claim)들을 포함하며, 사용자의 정보나 권한 등을 담을 수 있다.

Signature : 토큰의 유효성 검증을 위한 문자열


*클레임이란 토큰에서 사용할 정보의 조각 이는  name / value 의 한 쌍으로 이뤄져있음.

--------------------------------------------------------------------------------------------------------------
=> Spring Security + JWT 
1. 클라이언트에서 서버로 ID/PW 로그인을 요청함
2. 그러면 서버에서 ID/PW를 검증하고 엑세스 토큰과 리프레시 토큰을 발급해줌
3. API 요청시 엑세스 토큰을 헤더에 담아서 요청
 ---->
그렇다면? 엑세스 토큰이 만료되면 어떻게 될까
1. 서버에서 엑세스 토큰 만료 응답을 함
2. 그럼 클라이언트에서 다시 토큰 재발급을 요청함
3. 같은 작업으로 토큰 검증 후 새로운 토큰들을 발급


